name: ci

on:
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUSTFLAGS: "-Cinstrument-coverage"
  LLVM_PROFILE_FILE: "ch-%p-%m.profraw"

jobs:
  test-x86-64:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        runner: [ 'garm-jammy', "garm-jammy-amd" ]
        libc: [ "musl", 'gnu' ]
    name: Tests (x86-64)
    runs-on: ${{ github.event_name == 'pull_request' && !(matrix.runner == 'garm-jammy' && matrix.libc == 'gnu') && 'ubuntu-latest' || format('{0}-16', matrix.runner) }}
    steps:
      - name: Code checkout
        if: ${{ github.event_name != 'pull_request' || (matrix.runner == 'garm-jammy' && matrix.libc == 'gnu') }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run unit tests
        if: ${{ github.event_name != 'pull_request' || (matrix.runner == 'garm-jammy' && matrix.libc == 'gnu') }}
        run: scripts/dev_cli.sh tests --unit --libc ${{ matrix.libc }}
      - name: Export Coverage data
        if: ${{ github.event_name != 'pull_request' || (matrix.runner == 'garm-jammy' && matrix.libc == 'gnu') }}
        run: scripts/dev_cli.sh tests --coverage --libc ${{ matrix.libc }} -- -- lcov
      - name: Upload Artifact
        if: ${{ github.event_name != 'pull_request' || (matrix.runner == 'garm-jammy' && matrix.libc == 'gnu') }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-x86_64
          path: coverage-x86_64.info
      - name: Skipping build for PR
        if: ${{ github.event_name == 'pull_request' && matrix.runner != 'garm-jammy' && matrix.libc != 'gnu' }}
        run: echo "Skipping build for PR"

#  test-arm64:
#    timeout-minutes: 120
#    name: Tests (ARM64)
#    runs-on: bookworm-arm64
#    steps:
#      - name: Fix workspace permissions
#        run: sudo chown -R runner:runner ${GITHUB_WORKSPACE}
#      - name: Code checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#      - name: Run unit tests (musl)
#        run: scripts/dev_cli.sh tests --unit --libc musl
#      - name: Export Coverage data
#        run: scripts/dev_cli.sh tests --coverage --libc musl  -- -- lcov
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: coverage-aarch64
#          path: coverage-aarch64.info

  coverage:
    needs: [ test-x86-64]
    uses: ./.github/workflows/coverage.yaml
